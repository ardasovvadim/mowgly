{"version":3,"file":"src_app_pages_user-registration_user-registration_module_ts.js","mappings":";;;;;;;;;;;;;;;;;AAImC;;;;AAM5B,MAAM,iBAAiB;IAE1B,YACqB,WAAkC,EAClC,QAA0B;QAD1B,gBAAW,GAAX,WAAW,CAAuB;QAClC,aAAQ,GAAR,QAAQ,CAAkB;IAE/C,CAAC;IAED,WAAW,CACP,KAA6B,EAC7B,KAA0B;QAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CACzC,mDAAG,CAAC,eAAe,CAAC,EAAE;YAClB,IAAI,eAAe;gBACf,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACzB,OAAO,CAAC,eAAe,CAAC;QAC5B,CAAC,CAAC,CACL,CAAC;IACN,CAAC;;kFAlBQ,iBAAiB;kHAAjB,iBAAiB,WAAjB,iBAAiB,mBAFd,MAAM;;;;;;;;;;;;;;;;;;;;;ACN0B;AAEb;;;;AAI5B,MAAM,4BAA4B;IAErC,YACqB,WAAwB,EACxB,MAAc;QADd,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;IAEnC,CAAC;IAED,WAAW,CACP,KAA6B,EAC7B,KAA0B;QAC1B,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE/C,IAAI,CAAC,KAAK;YACN,OAAO,IAAI,CAAC;QAEhB,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC;aACvC,IAAI,CACD,mDAAG,CAAC,MAAM,CAAC,EAAE;YACT,QAAQ,CAAC;YACT,KAAK,CAAC,IAAI,GAAG;gBACT,MAAM,EAAE,MAAM;aACjB,CAAC;YAEF,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,EACF,gDAAU,CAAC,GAAG,CAAC,EAAE;YACb,QAAQ,CAAC;YACT,KAAK,CAAC,IAAI,GAAG;gBACT,KAAK,EAAE,GAAG;aACb,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE;gBAC3B,KAAK,EAAE;oBACH,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,8DAA8D;iBAC5D;aACf,CAAC,CAAC;YACH,OAAO,wCAAE,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,CACL,CAAC;IACV,CAAC;;wGAzCQ,4BAA4B;6HAA5B,4BAA4B,WAA5B,4BAA4B;;;;;;;;;;;;;;;;;;;;;;ACP4D;AAI9C;;;;;;;;ICD/C,oEAAkB;IAAA,0PAAoC;IAAA,4DAAI;;;IAQlD,0EAAsC;IAClC,oEAAiC;IACrC,4DAAM;;;IADE,0DAAuB;IAAvB,qJAAuB;;;IAQvB,kKACJ;;;IAWI,kKACJ;;;IAiBA,wEAAqE;IACjE,kKACJ;IAAA,qEAAe;;;IAEX,wEAAiD;IAC7C,2MACJ;IAAA,qEAAe;;;IAFf,0JAEe;;;IAFA,mGAAgC;;;IAanD,wEAAuD;IACnD,kKACJ;IAAA,qEAAe;;;IAUf,wEAAyF;IACrF,kKACJ;IAAA,qEAAe;;;IAEX,wEAA+D;IAC3D,6KACJ;IAAA,qEAAe;;;IAFf,0JAEe;;;IAFA,kHAA8C;;;;IAczE,0EAAuC;IACC,uUAAc,8BAAsB,IAAC;IAAC,4DAAkB;;ADvFrG,MAAM,6BAA6B;IAQxC,YACqB,EAAe,EACf,WAAkC,EAClC,MAAc,EACd,cAA8B;QAH9B,OAAE,GAAF,EAAE,CAAa;QACf,gBAAW,GAAX,WAAW,CAAuB;QAClC,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QARnD,cAAS,GAAG,IAAI,CAAC;QACjB,cAAS,GAAW,IAAI,CAAC;IAQrB,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YAC/C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;YACnB,OAAM;QAER,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM;YACnB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,KAA0B,CAAC;YAC3F,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAA0B,CAAC,CAAC;QAEtE,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,QAAQ,CAAC,IAAY,EAAE,KAAa;QAClC,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;IACnE,CAAC;IAED,uBAAuB,CAAC,QAAgC;QACtD,IAAI,QAAQ,CAAC,SAAS,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SAClC;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,+DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAChD;IACH,CAAC;IAED,cAAc,CAAC,QAAa;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC;aACtC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEO,SAAS;;QACf,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;gBACtB,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;gBACtB,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;gBACtB,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,+DAAmB,CAAC,CAAC;YAC5C,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC,+DAAmB,CAAC,CAAC;YAC5C,UAAU,EAAE,CAAC,UAAU,CAAC;YACxB,KAAK,EAAE,CAAC,gBAAI,CAAC,MAAM,0CAAE,KAAK,mCAAI,EAAE,EAAE,CAAC,+DAAmB,EAAE,4DAAgB,CAAC,CAAC;YAC1E,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,CAAC,CAAC;YACrC,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,CAAC,CAAC;SAC7C,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAAC,CAAC,mBAAoC,EAA4B,EAAE;YAChH,MAAM,YAAY,GAAG,mBAAmB,CAAC,KAAK,CAAC;YAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;YACtD,IAAI,YAAY,KAAK,EAAE,EAAE;gBACvB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,YAAY,KAAK,aAAa,EAAE;gBAClC,OAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;aAC5B;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;;0GA9FU,6BAA6B;2HAA7B,6BAA6B;QCZ1C,yEAA4F;QAGhF,6HAAW;QAAA,4DAAK;QACpB,qHAA0D;QAC9D,4DAAM;QAEN,0EAAyE;QAAxB,yJAAY,cAAU,IAAC;QAEpE,yEAA0B;QAEtB,yIAIc;QAEd,yEAAuB;QAEf,sFAAK;QAAA,uEAAK;QAAA,6DAAC;QAAA,4DAAM;QACjB,2IAEc;QAClB,4DAAQ;QACR,0EAA8B;QAC1B,uEAAkG;QACtG,4DAAM;QAGV,0EAAuB;QAEf,8GAAS;QAAA,uEAAK;QAAA,6DAAC;QAAA,4DAAM;QACrB,2IAEc;QAClB,4DAAQ;QACR,0EAA8B;QAC1B,wEAAoG;QACxG,4DAAM;QAGV,0EAAuB;QAC2B,yHAAW;QAAA,4DAAQ;QACjE,0EAA8B;QAC1B,wEAA2G;QAC/G,4DAAM;QAGV,0EAAuB;QAEf,4FAAM;QAAA,uEAAK;QAAA,6DAAC;QAAA,4DAAM;QAClB,8IAEe;QACf,wNAIc;QAClB,4DAAQ;QACR,0EAA8B;QAC1B,wEAAqG;QACzG,4DAAM;QAGV,0EAAuB;QAEf,kGAAO;QAAA,uEAAK;QAAA,6DAAC;QAAA,4DAAM;QACnB,6IAEe;QACnB,4DAAQ;QACR,0EAA8B;QAC1B,wEAAsG;QAC1G,4DAAM;QAGV,0EAAuB;QAEf,qKAAmB;QAAA,uEAAK;QAAA,6DAAC;QAAA,4DAAM;QAC/B,8IAEe;QACf,wNAIc;QAClB,4DAAQ;QACR,0EAA8B;QAC1B,wEAAgI;QACpI,4DAAM;QAKd,2EAA2C;QACyC,sJAAe;QAAA,4DAAS;QACxG,4HAEM;QACV,4DAAM;;;;QAjGF,0DAAY;QAAZ,4EAAY;QAGU,0DAAkB;QAAlB,+EAAkB;QAI3B,0DAAkB;QAAlB,+EAAkB;QASV,0DAA0C;QAA1C,uGAA0C;QAY1C,0DAAyC;QAAzC,sGAAyC;QAmBvC,2DAAqC;QAArC,mGAAqC;QAiBrC,2DAAsC;QAAtC,sGAAsC;QAYtC,0DAA+C;QAA/C,6GAA+C;QAkB9C,0DAAa;QAAb,6EAAa;;;;;;;;;;;;;;;;;;;;;ACjGI;AACmD;AAClB;AACnB;;;AAEnE,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,mHAA6B;QACxC,WAAW,EAAE,CAAC,iGAA4B,EAAE,0EAAiB,CAAC;KACjE;CACJ,CAAC;AAMK,MAAM,6BAA6B;;0GAA7B,6BAA6B;0HAA7B,6BAA6B;8HAH7B,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEb,6BAA6B,oFAF5B,yDAAY;;;;;;;;;;;;;;;;;;;;ACduD;AACuB;AACxC;AACsB;;AAe/E,MAAM,sBAAsB;;4FAAtB,sBAAsB;mHAAtB,sBAAsB;wHAJpB;QACP,iGAA4B;KAC/B,YANQ;YACL,uEAAc;YACd,4FAA6B;SAChC;mIAKQ,sBAAsB,mBAV3B,mHAA6B,aAG7B,uEAAc;QACd,4FAA6B","sources":["./src/app/guards/not-authorize.guard.ts","./src/app/pages/user-registration/guards/user-invitation-validator.guard.ts","./src/app/pages/user-registration/user-registration-page/user-registration-page.component.ts","./src/app/pages/user-registration/user-registration-page/user-registration-page.component.html","./src/app/pages/user-registration/user-registration-routing.module.ts","./src/app/pages/user-registration/user-registration.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {AuthenticationService} from '../services/authentication.service';\nimport {map} from 'rxjs/operators';\nimport {LocationStrategy} from '@angular/common';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotAuthorizeGuard implements CanActivate {\n\n    constructor(\n        private readonly authService: AuthenticationService,\n        private readonly location: LocationStrategy\n    ) {\n    }\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        return this.authService.isAuthenticated$.pipe(\n            map(isAuthenticated => {\n                if (isAuthenticated)\n                    this.location.back();\n                return !isAuthenticated;\n            })\n        );\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {catchError, Observable, of} from 'rxjs';\nimport {UserService} from '../../../services/user.service';\nimport {map} from 'rxjs/operators';\nimport {MgError} from '../../error-page/error-page.component';\n\n@Injectable()\nexport class UserInvitationValidatorGuard implements CanActivate {\n\n    constructor(\n        private readonly userService: UserService,\n        private readonly router: Router\n    ) {\n    }\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        const token = route.queryParamMap.get('token');\n\n        if (!token)\n            return true;\n\n        return this.userService.getInvitation(token)\n            .pipe(\n                map(invite => {\n                    debugger;\n                    route.data = {\n                        invite: invite\n                    };\n\n                    return true;\n                }),\n                catchError(err => {\n                    debugger;\n                    route.data = {\n                        error: err\n                    };\n\n                    this.router.navigate(['/400'], {\n                        state: {\n                            code: '400',\n                            text: 'Неправильне посилання на запрошення або час запрошення минув'\n                        } as MgError\n                    });\n                    return of(true);\n                }),\n            );\n    }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {AbstractControl, FormBuilder, FormGroup, ValidationErrors, Validators} from '@angular/forms';\nimport {AuthenticationService} from '../../../services/authentication.service';\nimport {RegistrationModel, UserInviteDto, UserValidationResponse} from '../../../models/user.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {errorsToHtml} from '../../../utils/form-utils';\n\n@Component({\n  selector: 'mg-user-registration-page',\n  templateUrl: './user-registration-page.component.html',\n  styleUrls: ['./user-registration-page.component.scss']\n})\nexport class UserRegistrationPageComponent implements OnInit {\n\n  form: FormGroup;\n\n  submitted = true;\n  errorHtml: string = null;\n  invite: UserInviteDto;\n\n  constructor(\n      private readonly fb: FormBuilder,\n      private readonly authService: AuthenticationService,\n      private readonly router: Router,\n      private readonly activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe((data: any) => {\n      this.invite = data.invite;\n      this.buildForm();\n    });\n\n    this.buildForm();\n  }\n\n  register() {\n    this.submitted = true;\n    this.errorHtml = null;\n\n    if (this.form.invalid)\n      return\n\n    const obs = this.invite\n        ? this.authService.registerWithInvite(this.invite.id, this.form.value as RegistrationModel)\n        : this.authService.register(this.form.value as RegistrationModel);\n\n    obs.subscribe(response => this.processRegisterResponse(response));\n  }\n\n  hasError(name: string, error: string) {\n    return this.submitted && this.form.controls[name].hasError(error)\n  }\n\n  processRegisterResponse(response: UserValidationResponse) {\n    if (response.isSuccess) {\n      this.router.navigate(['/login']);\n    } else {\n      this.errorHtml = errorsToHtml(response.errors);\n    }\n  }\n\n  onGoogleSignup(response: any) {\n    this.errorHtml = null;\n\n    this.authService.signupWithGoogle(response)\n        .subscribe(resp => this.processRegisterResponse(resp));\n  }\n\n  private buildForm() {\n    this.submitted = false;\n\n    let firstName = '';\n    let lastName = '';\n    let middleName = '';\n\n    if (this.invite) {\n      const nameParts = this.invite.name.split(' ');\n      if (nameParts.length > 0)\n        firstName = nameParts[0];\n      if (nameParts.length > 1)\n        lastName = nameParts[1];\n      if (nameParts.length > 2)\n        middleName = nameParts[2];\n    }\n\n    this.form = this.fb.group({\n      firstName: [lastName, [Validators.required]],\n      lastName: [firstName, [Validators.required]],\n      middleName: [middleName],\n      email: [this.invite?.email ?? '', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n      confirmPassword: ['', [Validators.required]],\n    });\n\n    this.form.get('confirmPassword').addValidators((confirmationControl: AbstractControl) : ValidationErrors | null => {\n      const confirmValue = confirmationControl.value;\n      const passwordValue = this.form.get('password').value;\n      if (confirmValue === '') {\n        return null;\n      }\n      if (confirmValue !== passwordValue) {\n        return  { mustMatch: true }\n      }\n      return null;\n    });\n  }\n}\n","<div class=\"uk-card mt-100 uk-align-center mg-card\" style=\"max-width: 600px; padding: 20px\">\n\n    <div class=\"uk-card-header uk-text-center\">\n        <h2>Регістрація</h2>\n        <p *ngIf=\"invite\">Завершіть реєстрацію - введіть данні</p>\n    </div>\n\n    <form class=\"uk-form-stacked\" [formGroup]=\"form\" (ngSubmit)=\"register()\">\n\n        <div class=\"uk-card-body\">\n\n            <ng-template [ngIf]=\"errorHtml\">\n                <div class=\"uk-margin uk-form-danger\">\n                    <ul [innerHTML]=\"errorHtml\"></ul>\n                </div>\n            </ng-template>\n\n            <div class=\"uk-margin\">\n                <label class=\"uk-form-label\" for=\"firstName\">\n                    Імʼя <sup>*</sup>\n                    <ng-template [ngIf]=\"hasError('firstName', 'required')\">\n                        - це поле обов'язкове\n                    </ng-template>\n                </label>\n                <div class=\"uk-form-controls\">\n                    <input type=\"text\" class=\"uk-input\" placeholder=\"Імʼя\" id=\"firstName\" formControlName=\"firstName\">\n                </div>\n            </div>\n\n            <div class=\"uk-margin\">\n                <label class=\"uk-form-label\" for=\"lastName\">\n                    Прізвище <sup>*</sup>\n                    <ng-template [ngIf]=\"hasError('lastName', 'required')\">\n                        - це поле обов'язкове\n                    </ng-template>\n                </label>\n                <div class=\"uk-form-controls\">\n                    <input type=\"text\" class=\"uk-input\" placeholder=\"Прізвище\" id=\"lastName\" formControlName=\"lastName\">\n                </div>\n            </div>\n\n            <div class=\"uk-margin\">\n                <label class=\"uk-form-label\" for=\"middleName\">По-батькові</label>\n                <div class=\"uk-form-controls\">\n                    <input type=\"text\" class=\"uk-input\" placeholder=\"По-батькові\" id=\"middleName\" formControlName=\"middleName\">\n                </div>\n            </div>\n\n            <div class=\"uk-margin\">\n                <label class=\"uk-form-label\" for=\"email\">\n                    Емейл <sup>*</sup>\n                    <ng-container *ngIf=\"hasError('email', 'required'); else emailEmail\">\n                        - це поле обов'язкове\n                    </ng-container>\n                    <ng-template #emailEmail>\n                        <ng-container *ngIf=\"hasError('email', 'email')\">\n                            - некоректний формат емейлу\n                        </ng-container>\n                    </ng-template>\n                </label>\n                <div class=\"uk-form-controls\">\n                    <input type=\"text\" class=\"uk-input\" placeholder=\"email@gmail.com\" id=\"email\" formControlName=\"email\">\n                </div>\n            </div>\n\n            <div class=\"uk-margin\">\n                <label class=\"uk-form-label\" for=\"password\">\n                    Пароль <sup>*</sup>\n                    <ng-container *ngIf=\"hasError('password', 'required')\">\n                        - це поле обов'язкове\n                    </ng-container>\n                </label>\n                <div class=\"uk-form-controls\">\n                    <input type=\"password\" class=\"uk-input\" placeholder=\"Пароль\" id=\"password\" formControlName=\"password\">\n                </div>\n            </div>\n\n            <div class=\"uk-margin\">\n                <label class=\"uk-form-label\" for=\"confirmPassword\">\n                    Підтвердіть пароль <sup>*</sup>\n                    <ng-container *ngIf=\"hasError('confirmPassword', 'required'); else confirmPasswordMatch\">\n                        - це поле обов'язкове\n                    </ng-container>\n                    <ng-template #confirmPasswordMatch>\n                        <ng-container *ngIf=\"hasError('confirmPassword', 'mustMatch')\">\n                            - пароль має збігатися\n                        </ng-container>\n                    </ng-template>\n                </label>\n                <div class=\"uk-form-controls\">\n                    <input type=\"password\" class=\"uk-input\" placeholder=\"Підтвердіть пароль\" id=\"confirmPassword\" formControlName=\"confirmPassword\">\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"uk-card-footer uk-text-center\">\n            <button class=\"uk-button uk-button-primary uk-margin-small-right\" type=\"submit\">Зареєструватись</button>\n            <div class=\"uk-inline\" *ngIf=\"!invite\">\n                <mg-google-login text=\"signup_with\" (onResponse)=\"onGoogleSignup($event)\"></mg-google-login>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {UserRegistrationPageComponent} from './user-registration-page/user-registration-page.component';\nimport {UserInvitationValidatorGuard} from './guards/user-invitation-validator.guard';\nimport {NotAuthorizeGuard} from '../../guards/not-authorize.guard';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserRegistrationPageComponent,\n        canActivate: [UserInvitationValidatorGuard, NotAuthorizeGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UserRegistrationRoutingModule {\n}\n","import {NgModule} from '@angular/core';\n\nimport {UserRegistrationRoutingModule} from './user-registration-routing.module';\nimport {UserRegistrationPageComponent} from './user-registration-page/user-registration-page.component';\nimport {MgSharedModule} from '../../mg-shared/mg-shared.module';\nimport {UserInvitationValidatorGuard} from './guards/user-invitation-validator.guard';\n\n\n@NgModule({\n    declarations: [\n        UserRegistrationPageComponent,\n    ],\n    imports: [\n        MgSharedModule,\n        UserRegistrationRoutingModule\n    ],\n    providers: [\n        UserInvitationValidatorGuard\n    ]\n})\nexport class UserRegistrationModule {\n}\n"],"names":[],"sourceRoot":"webpack:///"}